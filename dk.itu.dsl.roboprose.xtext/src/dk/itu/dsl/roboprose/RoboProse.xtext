// RoboProse grammar
grammar dk.itu.dsl.roboprose.RoboProse with org.eclipse.xtext.common.Terminals

import "http://www.itu.dk/dsl/roboprose" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RoboProse returns RoboProse:
	{RoboProse}
	('My' 'robot' 'should' main=Main ParagraphDelimiter)?
	
	(listeners+=EventListener (ParagraphDelimiter listeners+=EventListener)* '.')?
	;

Main returns Main:
	actions+=Action ( ActionDelimiter actions+=Action)*
	;

EventListener returns EventListener:
	('When' | 'when') 'it' event=Event 'it' 'should' 
	actions+=Action ( ActionDelimiter actions+=Action)*
	( '(' 'but' sublisteners+=EventListener ( SublistenerDelimiter sublisteners+=EventListener)* ')')?
	;

SublistenerDelimiter:
	'.'
;
	
@Override
terminal WS: 
    (' '|'\t')+ NEWLINE?
    ;


// New line on DOS or Unix 
terminal NEWLINE:
    '\r'? '\n';
    
ActionDelimiter:
	(("and" "then") | ("," "then") | ("." "Then")) ("it" "should")?
;

ParagraphDelimiter:
	'.' NEWLINE NEWLINE+
;
	
Action returns Action:
	Move | Turn | Stop;

Event returns Event:
	Obstacle | Tapped;

Move returns Move:
	{Move}
	'move' (direction=MOVE_DIRECTION)? (('for' duration=EFloat 'seconds') | (isRandom=RANDOM))?
	;

Turn returns Turn:
	{Turn}
	'turn' (direction=TURN_DIRECTION)? (('for' duration=EFloat 'seconds') | (degrees=EFloat 'degrees') | (isRandom=RANDOM))?
	;

Stop returns Stop:
	{Stop}
	'stop' ('for' duration=EFloat 'seconds')?
	;

EFloat returns ecore::EFloat:
	'-'? INT? '.'? INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EString returns ecore::EString:
	STRING;	

Obstacle returns Obstacle:
	{Obstacle}
	'meets' 'an' 'obstacle'
	;

Tapped returns Tapped:
	{Tapped}
	'is' 'tapped'
	;

enum MOVE_DIRECTION:
	FORWARDS='forwards' | FORWARDS='forward' | BACKWARDS='backwards' | BACKWARDS='backward'  | BACKWARDS='back'
;

enum TURN_DIRECTION:
	LEFT='left' | RIGHT='right'
;

enum RANDOM:
	RANDOM='randomly' | RANDOM='random'
;