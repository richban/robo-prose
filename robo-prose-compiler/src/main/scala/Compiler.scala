// (c) mdsebook, wasowski, berger
//
// Runs the code generators from command line.  The easiest way to execute it:
//
// sbt run -> and then select mdsebook.fsm.xtext.scala.Generators
//
// In Eclipse you should be able to just right click this file and Run as > Scala Application.
//
// (otherwise you can package as a standalone JVM application)
// Right now the input file name is hard coded below, but you can easily
// change this to use command line arguments

package dk.itu.dsl.roboprose.compiler.xtext

import scala.collection.JavaConversions._

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl

import dk.itu.dsl.roboprose.frontend.xtext.RoboProseStandaloneSetup
import dk.itu.dsl.roboprose.constraints.Main
import dk.itu.dsl.roboprose.model.RoboprosePackage

object Compiler extends App {

  val instanceFileName = if (args.isEmpty) {
    println("Please specify a file:")
    scala.io.StdIn.readLine()
  } else {
    args(0)
  }

  // Strip the extension and add .xmi
  val outputFileName = instanceFileName.replaceAll("\\.[^.]*$", ".xmi")

  // Register our meta-model package for abstract syntax
  RoboprosePackage.eINSTANCE.eClass

  // Register a resource factory for XMI files
  Resource.Factory.Registry.INSTANCE.
  getExtensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl)

  // Register a suitable resource factory for RoboProse files (generated by Xtext)
  new RoboProseStandaloneSetup().createInjectorAndDoEMFRegistration

  // Loading our file here
  val uri = URI.createURI(instanceFileName)
  var resource = new ResourceSetImpl().getResource(uri, true);
  EcoreUtil.resolveAll(resource)

  // Get Java Object Robot Instance
  val robot = EcoreUtil.getAllProperContents[EObject](resource, false)
  val constraintsPassed = Main.checkInstances(Stream((instanceFileName, robot)))

  // Checking Constraints
  if (constraintsPassed) {
    val xmiResource = new ResourceSetImpl().createResource(URI.createURI(outputFileName))
    xmiResource.getContents().add(resource.getContents().get(0))
    xmiResource.save(null)
  }
}
